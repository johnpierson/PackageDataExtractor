<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamoServices</name>
    </assembly>
    <members>
        <member name="T:Dynamo.Logging.Analytics">
            <summary>
            Utility class to support analytics tracking.
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Analytics.DisableAnalytics">
            <summary>
            Disables all analytics collection (Google, ADP, etc.) for the lifetime of the process.
            To ensure that no analytics get through, please set set this flag to false before the DynamoModel is constructed.
            </summary>
        </member>
        <member name="T:Dynamo.Logging.Analytics.Dummy">
            <summary>
            A dummy IDisposable class
            </summary>
        </member>
        <member name="M:Dynamo.Logging.Analytics.Start(Dynamo.Logging.IAnalyticsClient)">
            <summary>
            Starts analytics client
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Dynamo.Logging.Analytics.ShutDown">
            <summary>
            Shuts down the client. Application life cycle end is tracked.
            </summary>
        </member>
        <member name="P:Dynamo.Logging.Analytics.IsEnabled">
            <summary>
            Checks if anlytics tracking is enabled or not. Required for testing.
            </summary>
        </member>
        <member name="P:Dynamo.Logging.Analytics.ReportingAnalytics">
            <summary>
            Returns if any analytics reporting is ON (Google, ADP etc.)
            </summary>
        </member>
        <member name="M:Dynamo.Logging.Analytics.TrackStartupTime(System.String,System.TimeSpan,System.String)">
            <summary>
            Tracks application startup time
            </summary>
            <param name="productName">Dynamo product name</param>
            <param name="time">Elapsed time</param>
            <param name="description">Optional description</param>
        </member>
        <member name="M:Dynamo.Logging.Analytics.TrackEvent(Dynamo.Logging.Actions,Dynamo.Logging.Categories,System.String,System.Nullable{System.Int32})">
            <summary>
            Tracks an arbitrary event.
            </summary>
            <param name="action">Action performed</param>
            <param name="category">Event category</param>
            <param name="description">Event description</param>
            <param name="value">A metric value associated with the event</param>
        </member>
        <member name="M:Dynamo.Logging.Analytics.TrackPreference(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Tracks user preference setting and its value.
            </summary>
            <param name="name">Name of the preference</param>
            <param name="stringValue">Preference value as string</param>
            <param name="metricValue">Metric value of the preference</param>
        </member>
        <member name="M:Dynamo.Logging.Analytics.TrackTimedEvent(Dynamo.Logging.Categories,System.String,System.TimeSpan,System.String)">
            <summary>
            Tracks a timed event, when it has completed.
            </summary>
            <param name="category">Event category</param>
            <param name="variable">Timed variable name</param>
            <param name="time">Time taken by the event</param>
            <param name="description">Event description</param>
        </member>
        <member name="M:Dynamo.Logging.Analytics.TrackScreenView(System.String)">
            <summary>
            Tracks screen view, such as Node view, Geometry view, Custom workspace etc.
            </summary>
            <param name="viewName">Name of the screen</param>
        </member>
        <member name="M:Dynamo.Logging.Analytics.TrackException(System.Exception,System.Boolean)">
            <summary>
            Tracks an exception. If the exception is fatal, its recorded as crash.
            </summary>
            <param name="ex">Exception</param>
            <param name="isFatal">If it's fatal</param>
        </member>
        <member name="M:Dynamo.Logging.Analytics.CreateTimedEvent(Dynamo.Logging.Categories,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new timed event with start state and tracks its start.
            Disposing the returned event will record the event completion.
            </summary>
            <param name="category">Event category</param>
            <param name="variable">Timed varaible name</param>
            <param name="description">Event description</param>
            <param name="value">A metric value associated with the event</param>
            <returns>Event as IDisposable</returns>
        </member>
        <member name="M:Dynamo.Logging.Analytics.TrackCommandEvent(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new command event of the given name. Start of the 
            command is tracked. When the event is disposed, it's completion is tracked.
            </summary>
            <param name="name">Command name</param>
            <param name="description">Event description</param>
            <param name="value">A metric value associated with the event</param>
            <returns>Event as IDisposable</returns>
        </member>
        <member name="M:Dynamo.Logging.Analytics.TrackFileOperationEvent(System.String,Dynamo.Logging.Actions,System.Int32,System.String)">
            <summary>
            Creates a new file operation event and tracks the start of the event.
            Disposing the returned event will record its completion.
            </summary>
            <param name="filepath">File path</param>
            <param name="operation">File operation</param>
            <param name="size">Size parameter</param>
            <param name="description">Event description</param>
            <returns>Event as IDisposable</returns>
        </member>
        <member name="M:Dynamo.Logging.Analytics.LogPiiInfo(System.String,System.String)">
            <summary>
            Logs usage data
            </summary>
            <param name="tag">Usage tag</param>
            <param name="data">Usage data</param>
        </member>
        <member name="T:Dynamo.Logging.Categories">
            <summary>
            Categories for analytics tracking.
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.ApplicationLifecycle">
            <summary>
            Events Category related to application lifecycle
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.Stability">
            <summary>
            Events Category related to product stability
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.NodeOperations">
            <summary>
            Events Category related to Node operations
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.Performance">
            <summary>
            Events Category related to Performance
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.Command">
            <summary>
            Events Category related to Dynamo commands
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.FileOperation">
            <summary>
            Events Category related to File operations
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.SearchUX">
            <summary>
            Events Category related to Search UX
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.Preferences">
            <summary>
            Events Category related to user preferences
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.Upgrade">
            <summary>
            Events Category related to Dynamo upgrade
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.Engine">
            <summary>
            Events Category related to DesignScript VM
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.NodeAutoCompleteOperations">
            <summary>
            Events Category related to Node Auto-Complete
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.InCanvasSearchOperations">
            <summary>
            Events Category related to In-Canvas search
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.PythonOperations">
            <summary>
            Events Category related to Python operations
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.ExtensionOperations">
            <summary>
            Events Category related to Extensions operations
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.ViewExtensionOperations">
            <summary>
            Events Category related to View Extensions operations
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.PackageManagerOperations">
            <summary>
            Events Category related to package manager operations
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.NoteOperations">
            <summary>
            Events Category related to Note operations
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.WorkspaceReferencesOperations">
            <summary>
            Events Category related to Workspace References Operations
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.WorkspaceReferences">
            <summary>
            Events Category related to saved Workspace References
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.GroupOperations">
            <summary>
            Events Category related to Groups
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.NodeContextMenuOperations">
            <summary>
            Events Category related to Node context menu
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.ConnectorOperations">
            <summary>
            Events Category related to connectors
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.GroupStyleOperations">
            <summary>
            Events Category related to group styles
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.GuidedTourOperations">
            <summary>
            Events Category related to guided tours
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Categories.SplashScreenOperations">
            <summary>
            Events Category related to the splash screen
            </summary>
        </member>
        <member name="T:Dynamo.Logging.Actions">
            <summary>
            Actions for analytics tracking.
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Start">
            <summary>
            Start of an event
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.End">
            <summary>
            End of an event
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Create">
            <summary>
            Create Event, such as File create or Node create etc.
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Delete">
            <summary>
            Delete Event, such as Node delete
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Move">
            <summary>
            Move Event, such as Node move, dialog move
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Copy">
            <summary>
            Copy Event, such as Node copy
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Open">
            <summary>
            Open Event, such as Open workspace
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Close">
            <summary>
            Close Event, such as Close workspace, Close Python Editor
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Read">
            <summary>
            Read Event, such as File read
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Write">
            <summary>
            Write Event, such as File write
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Save">
            <summary>
            Save Event, such as Save workspace and save Python code
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.SaveAs">
            <summary>
            SaveAs Event, such as Save workspace as.
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.New">
            <summary>
            New Event, such as New workspace
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.EngineFailure">
            <summary>
            Engine Failure event
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Filter">
            <summary>
            Filter event, e.g. when package filter is active
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Unresolved">
            <summary>
            Unresolved Node found event
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Downloaded">
            <summary>
            Update Downloaded event
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Installed">
            <summary>
            Update Installed event
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Select">
            <summary>
            Select event, such as node auto-complete suggestion selection or in-canvas search selection
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Migration">
            <summary>
            Migration event, such as Python migration or DYN migration
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Switch">
            <summary>
            Switch event, such as Python engine switch, dropdown node switch
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Run">
            <summary>
            Run event, such as Python node run clicked, Graph run Clicked, generic node run during graph execution
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Load">
            <summary>
            Load event, such as extensions loaded, package loaded
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Dock">
            <summary>
            Dock event, such as docking view extension
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Undock">
            <summary>
            Undock event, such as undocking view extension
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Rate">
            <summary>
            Rate event, such as rating guided tour
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Pin">
            <summary>
            Pin event, such as pinning a note to a node
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Unpin">
            <summary>
            Unpin event, such as unpinning a note from a node
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.DownloadNew">
            <summary>
            Download new event, such as downloading a new package in package reference section by user
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.KeepOld">
            <summary>
            KeepOld event, e.g. choosing to keep the old package in package reference section by user
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.PackageReferences">
            <summary>
            PackageReferences event, when a package reference is saved in a workspace
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.LocalReferences">
            <summary>
            KeepOldPackage event, when a local reference is saved in a workspace
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.ExternalReferences">
            <summary>
            KeepOldPackage event, when an external reference is saved in a workspace
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Ungroup">
            <summary>
            Ungroup event, when an group is Ungrouped
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Expanded">
            <summary>
            Expand event, when an group is Expanded
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Collapsed">
            <summary>
            Collapse event, when an group is Collapsed
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.AddedTo">
            <summary>
            AddedTo event, when a node is added to the group
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.RemovedFrom">
            <summary>
            RemovedFrom event, when a node is removed from the group
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Preview">
            <summary>
            Preview event, when a node is Previewed
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Freeze">
            <summary>
            Freeze event, when a node is Freezed
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Rename">
            <summary>
            Rename event, when a node is Renamed
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Show">
            <summary>
            Show event, when user wants to toggle display.
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Set">
            <summary>
            Set event, when user wants to set a property.
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Dismiss">
            <summary>
            Dismiss event, e.g. to dismiss node alerts.
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Undismiss">
            <summary>
            Undismiss event, to show dismissed alerts.
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Break">
            <summary>
            Break event, e.g. when a connection is broken by user choice
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Hide">
            <summary>
            Hide event, e.g when a connection is hidden by user choice
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.BuiltInPackageConflict">
            <summary>
            When a package conflict is encountered which involves at least one built-in package.
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Sort">
            <summary>
            Sort event, when user wants to sort some information
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.View">
            <summary>
            View event, when user wants to see some information
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.ViewDocumentation">
            <summary>
            Show event, when user wants to view Documentation.
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Cancel">
            <summary>
            Cancel operation, e.g. cancel adding a new group style 
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Completed">
            <summary>
            Completed event, e.g. when a user completes a guided tour
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Next">
            <summary>
            Next event, e.g. when a user clicks next on a guided tour
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Previous">
            <summary>
            Previous event, e.g. when a user goes back on a guided tour
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.TimeElapsed">
            <summary>
            TimeElapsed event, e.g. tracks the time elapsed since an event
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.SignIn">
            <summary>
            SignIn event, e.g. tracks the SignIn event
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.SignOut">
            <summary>
            SignOut event, e.g. tracks the SignOut event
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Import">
            <summary>
            Import event, e.g. tracks the ImportSettings event
            </summary>
        </member>
        <member name="F:Dynamo.Logging.Actions.Export">
            <summary>
            Export event, e.g. tracks the ExportSettings event
            </summary>
        </member>
        <member name="T:Dynamo.Logging.IAnalyticsClient">
            <summary>
            Implements analytics and logging functions. This interface is defined 
            for internal use only to implement analytics functions and mock the tests.
            </summary>
        </member>
        <member name="P:Dynamo.Logging.IAnalyticsClient.ReportingAnalytics">
            <summary>
            Checks if analytics reporting is ON.
            </summary>
        </member>
        <member name="P:Dynamo.Logging.IAnalyticsClient.ReportingUsage">
            <summary>
            Checks if detailed usage reporting is ON.
            </summary>
        </member>
        <member name="M:Dynamo.Logging.IAnalyticsClient.Start">
            <summary>
            Starts the client when DynamoModel is created. This method initializes
            the Analytics service and application life cycle start is tracked.
            </summary>
        </member>
        <member name="M:Dynamo.Logging.IAnalyticsClient.ShutDown">
            <summary>
            Shuts down the client. Application life cycle end is tracked.
            </summary>
        </member>
        <member name="M:Dynamo.Logging.IAnalyticsClient.TrackEvent(Dynamo.Logging.Actions,Dynamo.Logging.Categories,System.String,System.Nullable{System.Int32})">
            <summary>
            Tracks an arbitrary event.
            </summary>
            <param name="action">Action performed</param>
            <param name="category">Event category</param>
            <param name="description">Event description</param>
            <param name="value">A metric value associated with the event</param>
        </member>
        <member name="M:Dynamo.Logging.IAnalyticsClient.TrackPreference(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Tracks a preference setting and its value.
            </summary>
            <param name="name">Name of the preference</param>
            <param name="stringValue">Preference value as string</param>
            <param name="metricValue">Metric value of the preference</param>
        </member>
        <member name="M:Dynamo.Logging.IAnalyticsClient.TrackTimedEvent(Dynamo.Logging.Categories,System.String,System.TimeSpan,System.String)">
            <summary>
            Tracks a timed event, when it has completed.
            </summary>
            <param name="category">Event category</param>
            <param name="variable">Timed variable name</param>
            <param name="time">Time taken by the event</param>
            <param name="description">Event description</param>
        </member>
        <member name="M:Dynamo.Logging.IAnalyticsClient.TrackScreenView(System.String)">
            <summary>
            Tracks screen view, such as Node view, Geometry view, Custom workspace etc.
            </summary>
            <param name="viewName">Name of the screen</param>
        </member>
        <member name="M:Dynamo.Logging.IAnalyticsClient.TrackException(System.Exception,System.Boolean)">
            <summary>
            Tracks an exception. If the exception is fatal, its recorded as crash.
            </summary>
            <param name="ex">Exception</param>
            <param name="isFatal">If it's fatal</param>
        </member>
        <member name="M:Dynamo.Logging.IAnalyticsClient.CreateTimedEvent(Dynamo.Logging.Categories,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new timed event with start state and tracks its start.
            Disposing the returnd event will record the event completion.
            </summary>
            <param name="category">Event category</param>
            <param name="variable">Timed varaible name</param>
            <param name="description">Event description</param>
            <param name="value">A metric value associated with the event</param>
            <returns>Event as IDisposable</returns>
        </member>
        <member name="M:Dynamo.Logging.IAnalyticsClient.CreateCommandEvent(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new command event of the given name. Start of the 
            command is tracked. When the event is disposed, it's completion is tracked.
            </summary>
            <param name="name">Command name</param>
            <param name="description">Event description</param>
            <param name="value">A metric value associated with the event</param>
            <returns>Event as IDisposable</returns>
        </member>
        <member name="M:Dynamo.Logging.IAnalyticsClient.TrackFileOperationEvent(System.String,Dynamo.Logging.Actions,System.Int32,System.String)">
            <summary>
            Creates a new file operation event and tracks the start of the event.
            Disposing the returned event will record its completion.
            </summary>
            <param name="filepath">File path</param>
            <param name="operation">File operation</param>
            <param name="size">Size parameter</param>
            <param name="description">Event description</param>
            <returns>Event as IDisposable</returns>
        </member>
        <member name="M:Dynamo.Logging.IAnalyticsClient.LogPiiInfo(System.String,System.String)">
            <summary>
            Logs usage data
            </summary>
            <param name="tag">Usage tag</param>
            <param name="data">Usage data</param>
        </member>
        <member name="T:Dynamo.Events.ExecutionEvents">
            <summary>
            Communication bridge between Dynamo and client libraries to notify
            about changes to execution state
            </summary>
        </member>
        <member name="E:Dynamo.Events.ExecutionEvents.GraphPreExecution">
            <summary>
            The graph is about to evaluate
            </summary>
        </member>
        <member name="E:Dynamo.Events.ExecutionEvents.GraphPostExecution">
            <summary>
            The graph is done evaluating
            </summary>
        </member>
        <member name="P:Dynamo.Events.ExecutionEvents.ActiveSession">
            <summary>
            Returns active session for the execution, when Graph is executing. 
            This property is set to null if graph is not executing.
            </summary>
        </member>
        <member name="M:Dynamo.Events.ExecutionEvents.OnGraphPreExecution(Dynamo.Session.IExecutionSession)">
            <summary>
            Notify observers that the graph is about to evaluate
            </summary>
        </member>
        <member name="M:Dynamo.Events.ExecutionEvents.OnGraphPostExecution(Dynamo.Session.IExecutionSession)">
            <summary>
            Notify observers that the graph has evaluated
            </summary>
        </member>
        <member name="E:Dynamo.Events.WorkspaceEvents.WorkspaceAdded">
            <summary>
            An event that is triggered when a workspace is added
            to the DynamoModel's Workspaces collection.
            </summary>
        </member>
        <member name="E:Dynamo.Events.WorkspaceEvents.WorkspaceRemoveStarted">
            <summary>
            An event that is triggered prior to the removal of the workspace
            from the Workspaces collection.
            </summary>
        </member>
        <member name="E:Dynamo.Events.WorkspaceEvents.WorkspaceRemoved">
            <summary>
            An event that is triggered when a workspace is removed
            from the DynamoModel's Workspaces collection.
            </summary>
        </member>
        <member name="E:Dynamo.Events.WorkspaceEvents.WorkspaceClearing">
            <summary>
            An event that is triggered before a workspace is cleared.
            </summary>
        </member>
        <member name="E:Dynamo.Events.WorkspaceEvents.WorkspaceCleared">
            <summary>
            An event that is triggered after a workspace is cleared.
            </summary>
        </member>
        <member name="E:Dynamo.Events.WorkspaceEvents.WorkspaceSettingsChanged">
            <summary>
            An event raised when workspace ScaleFactor setting is changed.
            </summary>
        </member>
        <member name="T:Dynamo.Session.IExecutionSession">
            <summary>
            Represents a session object for current execution.
            </summary>
        </member>
        <member name="P:Dynamo.Session.IExecutionSession.CurrentWorkspacePath">
            <summary>
            File path for the current workspace in execution. Could be null or
            empty string if workspace is not yet saved.
            </summary>
        </member>
        <member name="M:Dynamo.Session.IExecutionSession.GetParameterValue(System.String)">
            <summary>
            Returns session parameter value for the given parameter name.
            </summary>
            <param name="parameter">Name of session parameter</param>
            <returns>Session parameter value as object</returns>
        </member>
        <member name="M:Dynamo.Session.IExecutionSession.GetParameterKeys">
            <summary>
            Returns list of session parameter keys available in the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Session.IExecutionSession.ResolveFilePath(System.String@)">
            <summary>
            A helper method to resolve the given file path. The given file path
            will be resolved by searching into the current workspace, core and 
            host application installation folders etc.
            </summary>
            <param name="filepath">Input file path</param>
            <returns>True if the file is found</returns>
        </member>
        <member name="T:Dynamo.Session.ParameterKeys">
            <summary>
            List of possible session parameter keys to obtain the session parameters.
            </summary>
        </member>
        <member name="F:Dynamo.Session.ParameterKeys.GeometryFactory">
            <summary>
            This key is used to get the full path for library, which implements 
            IGeometryFactory interface.
            </summary>
        </member>
        <member name="F:Dynamo.Session.ParameterKeys.NumberFormat">
            <summary>
            This key is used to get the number format used by Dynamo to format 
            the preview values. The returned value is string.
            </summary>
        </member>
        <member name="F:Dynamo.Session.ParameterKeys.MajorVersion">
            <summary>
            This key is used to get the Major version of Dynamo. The returned value
            is a number.
            </summary>
        </member>
        <member name="F:Dynamo.Session.ParameterKeys.MinorVersion">
            <summary>
            This key is used to get the Major version of Dynamo. The returned value
            is a number.
            </summary>
        </member>
        <member name="F:Dynamo.Session.ParameterKeys.LastExecutionDuration">
            <summary>
            The duration of an execution covered by an <see cref="T:Dynamo.Session.IExecutionSession"/>
            </summary>
        </member>
        <member name="F:Dynamo.Session.ParameterKeys.PackagePaths">
            <summary>
            The current collection of packagepaths that Dynamo is loading packages from.
            The Return value is IEnumerable
            </summary>
        </member>
        <member name="F:Dynamo.Session.ParameterKeys.Logger">
            <summary>
            The logger that logs to the Dynamo console.
            The return value is an ILogger
            </summary>
        </member>
        <member name="P:Dynamo.PythonServices.PythonEngine.InputDataMarshaler">
            <summary>
            Data Marshaler for all data coming into a Python node.
            </summary>
        </member>
        <member name="P:Dynamo.PythonServices.PythonEngine.OutputDataMarshaler">
            <summary>
            Data Marshaler for all data coming out of a Python node.
            </summary>
        </member>
        <member name="P:Dynamo.PythonServices.PythonEngine.Name">
            <summary>
            Name of the Python engine
            </summary>
        </member>
        <member name="E:Dynamo.PythonServices.PythonEngine.EvaluationStarted">
            <summary>
            Add an event handler before the Python evaluation begins
            </summary>
            <param name="callback"></param>
        </member>
        <member name="E:Dynamo.PythonServices.PythonEngine.EvaluationFinished">
            <summary>
            Add an event handler after the Python evaluation has finished
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Dynamo.PythonServices.PythonEngine.Evaluate(System.String,System.Collections.IList,System.Collections.IList)">
            <summary>
                Executes a Python script with custom variable names. Script may be a string
                read from a file, for example. Pass a list of names (matching the variable
                names in the script) to bindingNames and pass a corresponding list of values
                to bindingValues.
            </summary>
            <param name="code">Python script as a string.</param>
            <param name="bindingNames">Names of values referenced in Python script.</param>
            <param name="bindingValues">Values referenced in Python script.</param>
        </member>
        <member name="T:Dynamo.PythonServices.PythonEngineManager">
            <summary>
            Singleton class that other class can access and use for query loaded Python Engine info.
            </summary>
        </member>
        <member name="F:Dynamo.PythonServices.PythonEngineManager.lazy">
            <summary>
            Use Lazy&lt;PythonEngineManager&gt; to make sure the Singleton class is only initialized once
            </summary>
        </member>
        <member name="P:Dynamo.PythonServices.PythonEngineManager.Instance">
            <summary>
            The actual instance stored in the Singleton class
            </summary>
        </member>
        <member name="F:Dynamo.PythonServices.PythonEngineManager.AvailableEngines">
            <summary>
            An observable collection of all the loaded Python engines
            </summary>
        </member>
        <member name="F:Dynamo.PythonServices.PythonEngineManager.CPython3EngineName">
            <summary>
            CPython Engine name
            </summary>
        </member>
        <member name="F:Dynamo.PythonServices.PythonEngineManager.IronPython2EngineName">
            <summary>
            IronPython2 Engine name
            </summary>
        </member>
        <member name="M:Dynamo.PythonServices.PythonEngineManager.#ctor">
            <summary>
            Singleton class initialization logic which will be run in a lazy way the first time Dynamo try to evaluate a Python node
            </summary>
        </member>
        <member name="T:Dynamo.PythonServices.PythonCodeCompletionDataCore">
            <summary>
            Concrete type that gets returned and converted to an Avalonedit type implementing
            ICompletionData when used from WPF ScriptEditorContorl.
            </summary>
        </member>
        <member name="T:Dynamo.PythonServices.PythonCodeCompletionProviderCommon">
            <summary>
            This class represents a base class for Python code completion providers
            It partially implements the IExternalCodeCompletionProviderCore interface and
            contains a collection of utility functions/properties that are common among existing code completion provider classes
            </summary>
        </member>
        <member name="F:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.knownAssemblies">
            <summary>
            A list of short assembly names used with the TryGetTypeFromFullName method
            </summary>
        </member>
        <member name="F:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.BasicVariableTypes">
            <summary>
            Maps a basic variable regex to a basic python type.
            </summary>
        </member>
        <member name="P:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.ClrModules">
            <summary>
            Tracks already referenced CLR modules
            </summary>
        </member>
        <member name="P:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.BadStatements">
            <summary>
            Keeps track of failed statements to avoid poluting the log
            </summary>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.GetDescription(System.String,System.String,System.Boolean)">
            <summary>
            Try to generate a description from a typename.
            </summary>
            <param name="stub">Everything before the last namespace or type name e.g. System.Collections in System.Collections.ArrayList</param>
            <param name="item">Everything after the stub</param>
            <param name="isInstance">Whether it's an instance or not</param>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.EnumerateMembers(System.Type,System.String)">
            <summary>
            List all of the members in a CLR type
            </summary>
            <param name="type">The type</param>
            <param name="name">The name for the type</param>
            <returns>A list of completion data for the type</returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.GetLastName(System.String)">
            <summary>
            Returns the last name from the input line. The regex ignores tabs, spaces, the first new line, etc.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.GetLastNameSpace(System.String)">
            <summary>
            Returns the entire namespace from the end of the input line. The regex ignores tabs, spaces, the first new line, etc.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.GetFirstPossibleTypeName(System.String)">
            <summary>
            Returns the first possible type name from the type's declaration line.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.StripDocStrings(System.String)">
            <summary>
            Removes any docstring characters from the source code
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.FindClrReferences(System.String)">
            <summary>
            Detect all library references given the provided code
            </summary>
            <param name="code">Script code to search for CLR references</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.TryGetTypeFromFullName(System.String)">
            <summary>
            Check if a full type name is found in one of the known pre-loaded assemblies and return the type
            </summary>
            <param name="name">a full type name</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.UpdateImportedTypes(System.String)">
            <summary>
            Find all import statements and import into scope.  If the type is already in the scope, this will be skipped.
            </summary>
            <param name="code">The code to discover the import statements.</param>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.UpdateVariableTypes(System.String)">
            <summary>
            Traverse the given source code and define variable types based on
            the current scope
            </summary>
            <param name="code">The source code to look through</param>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.FindAllVariableAssignments(System.String)">
            <summary>
            Attempts to find all variable assignments in the code. Has basic variable unpacking support.
            We don't need to check the line indices because regex matches are ordered as per the code.
            </summary>
            <param name="code">The code to search</param>
            <returns>A dictionary of variable name and type pairs</returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.TryGetType(System.String)">
            <summary>
            Retrieves the clr Type corresponding to the input paramater name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.FindAllTypeImportStatements(System.String)">
            <summary>
            Attempts to find import statements that look like
                from lib import *
            </summary>
            <param name="code">The code to search</param>
            <returns>A dictionary matching the lib to the code where lib is the library being imported from</returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.FindTypeSpecificImportStatements(System.String)">
            <summary>
            Attempts to find import statements that look like
                from lib import type1, type2
            Doesn't currently match types with namespace qualifiers like Collections.ArrayList
            </summary>
            <param name="code">The code to search</param>
            <returns>A dictionary matching the lib to the code where lib is the library being imported from</returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.FindVariableStatementWithRegex(System.String,System.String)">
            <summary>
            Find a variable assignment of the form "varName = bla" where bla is matched by
            the given regex
            </summary>
            <param name="code">The code to search</param>
            <param name="valueRegex">Your regex to match the type</param>
            <returns>A dictionary of name to assignment line pairs</returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.FindAllImportStatements(System.String)">
            <summary>
            Attempts to find all import statements in the code
            </summary>
            <param name="code">The code to search</param>
            <returns>A list of tuples that contain the namespace, the module, and the custom name</returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.FindAllVariables(System.String)">
            <summary>
            Find a variable assignment of the form "varName = bla" where bla is matched by
            the given regex
            </summary>
            <param name="code">The code to search</param>
            <param name="valueRegex">Your regex to match the type</param>
            <returns>A dictionary of name to assignment line pairs</returns>
        </member>
        <member name="M:Dynamo.PythonServices.PythonCodeCompletionProviderCommon.FindBasicImportStatements(System.String)">
            <summary>
            Attempts to find import statements that look like
                import lib
            </summary>
            <param name="code">The code to search</param>
            <returns>A dictionary matching the lib to the code where lib is the library being imported from</returns>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.SupressImportIntoVMAttribute">
            <summary>
            This attribute is used to specify whether the item will be imported
            into the VM.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.IsVisibleInDynamoLibraryAttribute">
            <summary>
            This attribute is used to specify whether the item will be displayed
            in the library.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.ArbitraryDimensionArrayImportAttribute">
            <summary>
            This attribute is used to marshal parameters or return value of a method 
            as arbitrary dimension array in DesignScript VM. Usually this attribute
            is expected to be applied on IEnumerable derived object types. This 
            attribute should be used if you expect the IEnumerable parameters or
            return value may hold nested collection.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.ExtensionApplicationAttribute">
            <summary>
            This attribute is used to specify the Type of class that implements
            IExtensionApplication interface in the specified assembly. This 
            attribute can be used only once at assembly level. Having this attribute
            saves the cost of reflection on each exported types to find the type
            that implements IExtensionApplication interface.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.GraphicDataProviderAttribute">
            <summary>
            This attribute is used to specify the Type of class that implements
            IGraphicDataProvider interface in the specified assembly. This 
            attribute can be used only once at assembly level. Having this attribute
            saves the cost of reflection on each exported types to find the type
            that implements IGraphicDataProvider interface.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.ContextDataProviderAttribute">
            <summary>
            This attribute is used to specify the Type of class that implements
            IContextDataProvider interface in the specified assembly. This 
            attribute can be used only once at assembly level. Having this attribute
            saves the cost of reflection on each exported types to find the type
            that implements IContextDataProvider interface.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.ContextDataProviderAttribute.#ctor(System.Type,System.Func{System.Boolean})">
            <summary>
            Constructor to construct this attribute with a delegate to check
            whether this data provider captures data.
            </summary>
            <param name="dataProviderType">Type that implements 
            IContextDataProvider interface</param>
            <param name="capturesData">Delegate to check if the provider can
            capture data</param>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.ContextDataProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="dataProviderType">Type that implements 
            IContextDataProvider interface</param>
        </member>
        <member name="P:Autodesk.DesignScript.Runtime.ContextDataProviderAttribute.Type">
            <summary>
            Type implementing IContextDataProvider interface.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Runtime.ContextDataProviderAttribute.CapturesData">
            <summary>
            Checks if this type can capture data interactively
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.AllowRankReductionAttribute">
            <summary>
            This attribute can be applied to methods that return collection of
            objects, but with some combination of input parameters it returns a 
            collection of single object and at designscript side we want the method
            to return a single object instead of a collection of single object.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.AllowRankReductionAttribute.ReduceRank(System.Object)">
            <summary>
            Utility method to get the single object from the collection of 
            single object. If the input object is neither a collection nor a
            collection of single object, this method returns the input object.
            </summary>
            <param name="collection">Input object to be converted to singleton.
            </param>
            <returns>An object from the collection of single object or the 
            input object.</returns>
            
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.AllowRankReductionAttribute.IsRankReducible(System.Object)">
            <summary>
            Checks if the input object is a collection of single object.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.MultiReturnAttribute">
            <summary>
            This attribute describes keys in the returned dictionary of a method.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.RuntimeRequirementAttribute">
            <summary>
            This attribute can be applied to method which requires some runtime 
            support from DesignScript, e.g., tracing. 
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.DefaultArgumentAttribute">
            <summary>
            This attribute can be applied to parameter to specify a default 
            argument expressions.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.PreferredShortNameAttribute">
            <summary>
            This attribute can be applied to class to give a hint for generating
            variable name in node to code. For example, generating variable "vec"
            for Vector.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.IsObsoleteAttribute">
            <summary> 
            This attribute indicates the node is obsolete
            </summary> 
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.IsObsoleteAttribute.#ctor(System.String,System.Type)">
            <summary>
            Attribute constructor which enables localized message lookup.
            </summary>
            <param name="descriptionResourceID">resx id for this resource</param>
            <param name="resourceType">type that contains resource strings.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.IsObsoleteAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute constructor which enables localized message lookup.
            </summary>
            <param name="descriptionResourceID">resx id for this resource</param>
            <param name="typeName">name of type that contains resource strings.
            !!!Please note that in some .net contexts you must use the fully assembly qualified type name
            including version,culture info etc. In others only the type, assembly name are required.
             <see cref="P:System.Type.AssemblyQualifiedName"/> </param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.KeepReferenceAttribute">
            <summary>
            This attribute indicates the parameter will be referenced by the return
            object, hence its DS wrap object shouldn't be disposed even it is out
            of scope. The life-cycle of parameter will have the same life-cycle as
            the return object.
            
            Note the type of return object should be reference type, either a
            pointer or an array.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.KeepReferenceThisAttribute">
             <summary>
             This attribute is applied to member function of zero touch libary.
             It indicates the return object should keep a reference to "this"
             object so that even "this" object is out of scope, it will not be
             disposed.
            
             Note the type of return object should be reference type, either a
             pointer or an array.
             </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.IsLacingDisabledAttribute">
            <summary>
            This attribute is applied to a function to indicate whether to
            disable lacing strategy on this function or not.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.AllowArrayPromotionAttribute">
            <summary>
            This attribute is applied to a function that has one or more parameters
            as lists. It can be used to control arguments to the function
            from being promoted to arrays or arrays of higher dimension when the VM tries
            to do method resolution and match argument(s) to the function parameter(s). 
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IRenderPackage">
            <summary>
            This interface caches render specific data.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.Description">
            <summary>
            A tag used to store information about the render package.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.IsSelected">
            <summary>
            A flag indicating whether the render package is selected.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.HasRenderingData">
            <summary>
            A flag indicating whether the render package has data.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.DisplayLabels">
            <summary>
            A flag indicating whether the render package is displaying labels
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.RequiresPerVertexColoration">
            <summary>
            A flag indicating whether the render package requires 
            per vertex coloration.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.PointVertexCount">
            <summary>
            The number of point vertices in the package.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.LineVertexCount">
            <summary>
            The number of line vertices in the package.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.MeshVertexCount">
            <summary>
            The number of mesh vertices in the package.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.LineStripVertexCounts">
            <summary>
            A collection of int values representing how many vertices
            comprise each line segment in the package.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.LineStripVertices">
            <summary>
            A collection containing all line strip vertices as x1,y1,z1,x2,y2,z2...
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.LineStripVertexColors">
            <summary>
            A collection containing all line strip colors as r1,g1,b1,a1,r2,g2,b2,a2...
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.LineStripIndices">
            <summary>
            A collection containing all line strip indices.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.MeshVertices">
            <summary>
            A collection containing all mesh vertices as x1,y1,z1,x2,y2,z2...
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.MeshVertexColors">
            <summary>
            A collection containing all mesh vertex colors as r1,g1,b1,a1,r2,g2,b2,a2...
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.MeshIndices">
            <summary>
            A collection containing all mesh vertex indices.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.MeshNormals">
            <summary>
            A collection containing all mesh normals as x1,y1,z1,x2,y2,z2...
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.MeshTextureCoordinates">
            <summary>
            A collection containing all mesh texture coordinates as u1,v1,u2,v2...
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.PointVertices">
            <summary>
            A collection containing all point vertices as x1,y1,z1,x2,y2,z2...
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.PointVertexColors">
            <summary>
            A collection containing all mesh vertex colors as r1,g1,b1,a1,r2,g2,b2,a2...
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.PointIndices">
            <summary>
            A collection containing all point vertex indices.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.Colors">
            <summary>
            A collection of bytes representing RGBA colors. This field can be used to populate textures
            for mapping onto surfaces. Use the ColorsStride property to define the
            size of one dimension of the collection.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.ColorsStride">
            <summary>
            The size of one dimension of the Colors collection.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.AddPointVertex(System.Double,System.Double,System.Double)">
            <summary>
            Add a point vertex to the render package.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.AddPointVertexColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Add a point color to the render package.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.AddTriangleVertex(System.Double,System.Double,System.Double)">
            <summary>
            Add a triangle vertex location to the render package.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.AddTriangleVertexNormal(System.Double,System.Double,System.Double)">
            <summary>
            Add a triangle vertex normal to the render package.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.AddTriangleVertexUV(System.Double,System.Double)">
            <summary>
            Add a triangle texture coordinate to the render package.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.AddTriangleVertexColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Add a triangle vertex color to the render package.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.AddLineStripVertex(System.Double,System.Double,System.Double)">
            <summary>
            Add a line vertex to the render package.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.AddLineStripVertexCount(System.Int32)">
            <summary>
            Add a line strip vertex count to the render package.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.AddLineStripVertexColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Add a line strip vertex color to the render package.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.ApplyPointVertexColors(System.Byte[])">
            <summary>
            Apply a color to each point vertex.
            </summary>
            <param name="colors">A buffer of R,G,B,A values corresponding to each vertex.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.ApplyLineVertexColors(System.Byte[])">
            <summary>
            Apply a color to a sequence of line vertices.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.ApplyMeshVertexColors(System.Byte[])">
            <summary>
            Apply a color to each mesh vertex.
            </summary>
            <param name="colors">A buffer of R,G,B,A values corresponding to each vertex.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.SetColors(System.Byte[])">
            <summary>
            Set a an array of bytes to be used as a color map.
            </summary>
            <param name="colors"></param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackage.Clear">
            <summary>
            Clear all render data from the render package.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement">
            <summary>
            This interface provides additional methods adding for color information to a render package.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.PointVertexColorCount">
            <summary>
            The number of point vertices colors in the package (Optimized for speed).
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.LineVertexColorCount">
            <summary>
            The number of line vertices colors in the package (Optimized for speed).
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.MeshVertexColorCount">
            <summary>
            The number of mesh vertices colors in the package (Optimized for speed).
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.UpdatePointVertexColorForRange(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Update a color to a range of point vertices.
            </summary>
            <param name="startIndex">The index associated with the first vertex in PointVertices we want to associate with a color</param>
            <param name="endIndex">The index associated with the last vertex in PointVertices we want to associate with a color</param>
            <param name="red">byte for the red RGB value</param>
            <param name="green">byte for the green RGB value</param>
            <param name="blue">byte for the blue RGB value</param>
            <param name="alpha">byte for the alpha RGB value</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.AppendPointVertexColorRange(System.Byte[])">
            <summary>
            Append a color range for point vertices.
            </summary>
            <param name="colors">A buffer of R,G,B,A values corresponding to each vertex.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.UpdateLineVertexColorForRange(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Update a color to a range of line vertices.
            </summary>
            <param name="startIndex">The index associated with the first vertex in LineVertices we want to associate with a color</param>
            <param name="endIndex">The index associated with the last vertex in LineVertices we want to associate with a color</param>
            <param name="red">byte for the red RGB value</param>
            <param name="green">byte for the green RGB value</param>
            <param name="blue">byte for the blue RGB value</param>
            <param name="alpha">byte for the alpha RGB value</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.AppendLineVertexColorRange(System.Byte[])">
            <summary>
            Append a color range for line vertices.
            </summary>
            <param name="colors">A buffer of R,G,B,A values corresponding to each vertex.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.UpdateMeshVertexColorForRange(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Update a color to a range of of mesh vertices.
            </summary>
            <param name="startIndex">The index associated with the first vertex in MeshVertices we want to associate with a color</param>
            <param name="endIndex">The index associated with the last vertex in MeshVertices we want to associate with a color</param>
            <param name="red">byte for the red RGB value</param>
            <param name="green">byte for the green RGB value</param>
            <param name="blue">byte for the blue RGB value</param>
            <param name="alpha">byte for the alpha RGB value</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.AppendMeshVertexColorRange(System.Byte[])">
            <summary>
            Append a color range for mesh vertex.
            </summary>
            <param name="colors">A buffer of R,G,B,A values corresponding to each vertex.</param>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.TextureMapsList">
            <summary>
            A List containing arrays of bytes representing RGBA colors.
            These arrays can be used to populate textures for mapping onto specific meshes
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.TextureMapsStrideList">
            <summary>
            A list containing the size of one dimension of the associated texture map array in TextureMapsList.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.MeshVerticesRangesAssociatedWithTextureMaps">
            <summary>
            A list of mesh vertices ranges that have associated texture maps
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.AddTextureMapForMeshVerticesRange(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Set a color texture map for a specific range of mesh vertices
            </summary>
            <param name="startIndex">The index associated with the first vertex in MeshVertices we want to associate with the texture map</param>
            <param name="endIndex">The index associated with the last vertex in MeshVertices we want to associate with the texture map</param>
            <param name="textureMap">An array of bytes representing RGBA colors to be used as a color texture map</param>
            <param name="stride">The size of one dimension of the colors array</param>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackageSupplement.AllowLegacyColorOperations">
            <summary>
            Allow legacy usage of the color methods in IRenderPackage
            This flag is used by the UpdateRenderPackageAsyncTask implementation to flag
            any third party usage of deprecated color methods in IRenderPackage API
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IRenderLabels">
            <summary>
            Represents labels and positions
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderLabels.AddLabel(System.String,Autodesk.DesignScript.Interfaces.VertexType,System.Int32)">
            <summary>
            Add a label position to the render package with position information from an existing geometry vertex.
            </summary>
            <param name="label">Text to be displayed in the label</param>
            <param name="vertexType">The type of vertex geometry used to look up a position: Point, Line, or Mesh</param>
            <param name="index">The index of the vertex geometry used to look up a position</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderLabels.AddLabel(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Add a label position to the render package.
            </summary>
            <param name="label">Text to be displayed in the label</param>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderLabels.AutoGenerateLabels">
            <summary>
            A flag indicating whether the render package should auto generate labels based on replication indices
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderLabels.ClearLabels">
            <summary>
            Clear all label data from the render package.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IRenderInstancedLabels">
            <summary>
            Internal interface to enable adding labels that are related to an instanceableGraphicItem.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderInstancedLabels.AddInstancedLabel(System.String,Autodesk.DesignScript.Interfaces.VertexType,System.Int32,System.Int32,System.Guid)">
            <summary>
            Adds a label to the render package, but first transforms the label by the transform matrix of the 
            relevant graphicItem.
            </summary>
            <param name="label">label</param>
            <param name="vertexType">type of vertex</param>
            <param name="vertIndex">vertex index for base label position</param>
            <param name="instanceIndex">index to use for transform matrix</param>
            <param name="BaseTessellationId">baseTessellation Id of the item this label belongs to.
            Aids in lookup of the correct transform matrix.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IRenderInstancedLabels.InstanceCount(System.Guid)">
            <summary>
            Number of instances for a particular baseTessellation type(cuboid, sphere etc)
            </summary>
            <param name="baseTessellationID"></param>
            <returns>returns -1 if id cannot be found in package.</returns>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IInstancingRenderPackage">
            <summary>
            Represents instance matrices and references to tessellated geometry in the RenderPackage
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IInstancingRenderPackage.ContainsTessellationId(System.Guid)">
            <summary>
            Checks if a base tessellation guid has already been registered with this <see cref="T:Autodesk.DesignScript.Interfaces.IInstancingRenderPackage"/>.
            Both Line and Mesh ids are checked.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Autodesk.DesignScript.Interfaces.IInstancingRenderPackage.AddInstanceGuidForMeshVertexRange(System.Int32,System.Int32,System.Guid)" -->
        <!-- Badly formed XML comment ignored for member "M:Autodesk.DesignScript.Interfaces.IInstancingRenderPackage.AddInstanceGuidForLineVertexRange(System.Int32,System.Int32,System.Guid)" -->
        <member name="M:Autodesk.DesignScript.Interfaces.IInstancingRenderPackage.AddInstanceMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Guid)">
            <summary>
            Set the transform using a series of floats. The resulting transform is applied to the range of geometry specified by the id.
            Following conventional matrix notation, m11 is the value of the first row and first column, and m12
            is the value of the first row and second column.
            NOTE: This method should set the matrix exactly as described by the caller.
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m14"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m24"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
            <param name="m34"></param>
            <param name="m41"></param>
            <param name="m42"></param>
            <param name="m43"></param>
            <param name="m44"></param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IInstancingRenderPackage.AddInstanceMatrix(System.Single[],System.Guid)">
            <summary>
            Set the transform as a float array, The resulting transform is applied to the range of geometry specified by the id.
            This matrix should be laid out as follows in row vector order:
            [Xx,Xy,Xz, 0,
             Yx, Yy, Yz, 0,
             Zx, Zy, Zz, 0,
             offsetX, offsetY, offsetZ, W]
            NOTE: This method should transform the matrix from row vector order to whatever form is needed by the implementation.
            When converting from ProtoGeometry CoordinateSystem form to input matrix, set the first row to the X axis of the CS,
            the second row to the Y axis of the CS, the third row to the Z axis of the CS, and the last row to the CS origin, where W = 1. 
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IGraphicItem">
            <summary>
            Represents a graphics item object, that can provide tesselated data
            into the given render package.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGraphicItem.Tessellate(Autodesk.DesignScript.Interfaces.IRenderPackage,Autodesk.DesignScript.Interfaces.TessellationParameters)">
            <summary>
            Returns the graphics/tesselation data in given render package object.
            </summary>
            <param name="package">The render package, where graphics data to be
            pushed.</param>
            <param name="parameters"></param>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.ITransformable">
            <summary>
            An interface that defines items which have a transform property, which is a 4x4 matrix.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ITransformable.RequiresCustomTransform">
            <summary>
            A flag indicating whether the render package has had its Transform property set
            explicitly.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ITransformable.Transform">
            <summary>
            A 4x4 matrix that is used to transform all geometry in the render packaage.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformable.SetTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the transform using a series of doubles. The resulting transform is applied to all geometry in the renderPackage.
            Following conventional matrix notation, m11 is the value of the first row and first column, and m12
            is the value of the first row and second column.
            NOTE: This method should set the matrix exactly as described by the caller.
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m14"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m24"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
            <param name="m34"></param>
            <param name="m41"></param>
            <param name="m42"></param>
            <param name="m43"></param>
            <param name="m44"></param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformable.SetTransform(System.Double[])">
            <summary>
            Set the transform as a double array, this transform is applied to all geometry in the renderPackage.
            This matrix should be laid out as follows in row vector order:
            [Xx,Xy,Xz, 0,
             Yx, Yy, Yz, 0,
             Zx, Zy, Zz, 0,
             offsetX, offsetY, offsetZ, W]
            NOTE: This method should transform the matrix from row vector order to whatever form is needed by the implementation.
            When converting from ProtoGeometry CoordinateSystem form to input matrix, set the first row to the X axis of the CS,
            the second row to the Y axis of the CS, the third row to the Z axis of the CS, and the last row to the CS origin, where W = 1. 
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IInstanceableGraphicItem">
            <summary>
            An interface that defines items whose graphics are defined by a single base tessellation and instance transforms defined by 4x4 transformation matrices.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IInstanceableGraphicItem.BaseTessellationGuid">
            <summary>
            A Guid used to reference the base tessellation geometry that will be transformed for all related instances
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IInstanceableGraphicItem.InstanceInfoAvailable">
            <summary>
            A flag used to indicate if the current geometrical configuration of an item has instance information.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IInstanceableGraphicItem.AddBaseTessellation(Autodesk.DesignScript.Interfaces.IInstancingRenderPackage,Autodesk.DesignScript.Interfaces.TessellationParameters)">
            <summary>
            Adds the base graphics/tesselation data in given render package object.
            </summary>
            <param name="package">The render package, where base tessellation will be
            pushed.</param>
            <param name="parameters">tessellation parameters for the instance. Can be used to generate the
            correct shared base tessellation</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IInstanceableGraphicItem.AddInstance(Autodesk.DesignScript.Interfaces.IInstancingRenderPackage,Autodesk.DesignScript.Interfaces.TessellationParameters,System.String)">
            <summary>
            Adds an instance matrix for this geometry.
            </summary>
            <param name="package">The render package, where instance will be
            pushed.</param>
            <param name="parameters">tessellation parameters for the instance, only scale factor is generally applicable.</param>
            <param name="labelKey">the strig label key that specifices which result this instance represents in a node's output.</param>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.TessellationParameters.Tolerance">
            <summary>
            The tolerance for faceting.
            Default is -1.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.TessellationParameters.MaxTessellationDivisions">
            <summary>
            The maximum number of divisions for tessellation.
            Default is 512
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.TessellationParameters.ShowEdges">
            <summary>
            A flag indicating whether surface edges should be
            included in the RenderPackage. Default is false.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.TessellationParameters.ScaleFactor">
            <summary>
            The scale factor set in the workspace that must be applied to 
            distance and coordinate values used in rendering only ASM geometry.
            This scale factor is consumed only by LibG in its Tessellate method implementation.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IGraphicDataProvider">
            <summary>
            This interface provides graphics data into the RenderPackage interface 
            for given set of objects.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGraphicDataProvider.GetGraphicItems(System.Object)">
            <summary>
            Returns a list of IGraphicItem owned by the given object.
            </summary>
            <param name="obj">The object for which graphics items are queried.
            </param>
            <returns>List of IGraphicItem owned by the input object.</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGraphicDataProvider.Tessellate(System.Collections.Generic.List{System.Object},Autodesk.DesignScript.Interfaces.IRenderPackage,Autodesk.DesignScript.Interfaces.TessellationParameters)">
            <summary>
            Returns the Graphics/Render data into the given render package.
            </summary>
            <param name="objects">Objects which owns some graphics items</param>
            <param name="package">RenderPackage where graphics/render data can
            be pushed/set.</param>
            <param name="parameters">A TessellationParameters object.</param>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IGraphicPrimitives">
            <summary>
            The interface that represents json data for drawing a graphic primitive 
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.TriangleVertices">
            <summary>
            Base-64 encoded array of 32 bit floats, 3 per vertex.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.TriangleNormals">
            <summary>
            Base-64 encoded array of 32 bit floats, 3 per vertex.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.TriangleVertexColors">
            <summary>
            Base-64 encoded array of 32 bit unsigned integers, 1 per vertex, in RGBA format.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.TriangleTextureCoordinates">
            <summary>
            Base-64 encoded array of 32 bit floats, 2 per vertex.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.LineStripVertices">
            <summary>
            Base-64 encoded array of 32 bit floats, 3 per vertex.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.LineStripCounts">
            <summary>
            Base-64 encoded array of 32 bit unsigned integers, 1 per line strip, giving the number of vertices in the strip.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.LineStripColors">
            <summary>
            Base-64 encoded array of 32 bit unsigned integers, 1 per vertex, in RGBA format.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.PointVertices">
            <summary>
            Base-64 encoded array of 32 bit floats, 3 per vertex.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.PointVertexColors">
            <summary>
            Base-64 encoded array of 32 bit unsigned integers, 1 per vertex, in RGBA format.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.Colors">
            <summary>
            Base-64 encoded array of 32 bit unsigned integers in RGBA format, definining a texture to apply to the triangles.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.ColorsStride">
            <summary>
            Number of values per row in the `Colors` array.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphicPrimitives.RequiresPerVertexColoration">
            <summary>
             Whether or not the individual vertices should be colored using the data in the corresponding arrays.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.LegacyRenderPackageMethodException">
            <summary>
            Exception used to catch usage of Legacy IRenderPackage color APIs
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IConfiguration">
            <summary>
            Provides application configuration
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IConfiguration.RootModulePath">
            <summary>
            Provides the path of main executing script
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IConfiguration.IncludeDirectories">
            <summary>
            Provides list of include directories.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IConfiguration.GetConfigValue(System.String)">
            <summary>
            Returns application defined configuration value.
            </summary>
            <param name="config">Configuration name</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IConfiguration.SetConfigValue(System.String,System.Object)">
            <summary>
            Set application defined configuration value.
            </summary>
            <param name="config">Configuration name</param>
            <param name="value">Configuration value</param>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.GeometryFactory">
            <summary>
            This key is used to configure the library filename, which implements 
            IGeometryFactory interface.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.PersistentManager">
            <summary>
            This key is used to configure the library filename, which implements 
            IPersistenceManager interface.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.GeometryProvider">
            <summary>
            This key is used to set/get IContextDataProvider implementation
            by host application.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.SessionDatabase">
            <summary>
            This key is used to set the session database object for the host
            application. THIS IS NOW DEPRECATED (use "SessionKey" instead).
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.SessionKey">
            <summary>
            This key is used to set the session key (by the host application) 
            which is understood by the corresponding IPersistenceManager when 
            it comes to telling one session from another. An example of 
            session would be the documents in the host application, a host 
            document can be identified with a session key, and each host 
            document has a unique session key that IPersistenceManager can use
            to differentiate between two documents. The corresponding value 
            for SessionKey is a value of "string" type.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.RequestExplicitLock">
            <summary>
            This key is used to request explicit lock on database by the host
            application before execution of the script. The corresponding value
            is bool.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.RecordingUserActions">
            <summary>
            This key is used to check if the application is recording user actions.
            The corresponding value is bool.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.ClearPersistedObjects">
            <summary>
            This key is used to determine if the persistent objects should be cleared on 
            screen before each run. In live execution scenarios like DesignScript Studio,
            there is no clear distinction between runs. For more information, please see 
            "AsmExtensionApplication::OnBeginExecution" in "AsmExtensionApplication.cpp".
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.GeometricPreviewEnabled">
            <summary>
            This key is being referenced in "DesignScriptStudio.Graph.Ui.GraphControl"
            as a way to determine if the underlying "RenderService" should be enabled.
            The default behaviour (if this flag is not specified) is to enable geometric 
            preview. The "object" value being passed for this configuration key is 
            expected to be a "bool" object rather than a "string" object.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.FilteredClasses">
            <summary>
            This key is being referenced in "DesignScriptStudio.Graph.Ui.GraphControl"
            as a way to filtered out classes that is currently not supported in ProtoGL.
            The "object" value being passed for this configuration key is 
            expected to be a "string" object which specified the assembly and class that
            should be hidden. The location of the config file is "\installtools\Bundle\
            DesignScript.bundle\Contents\Win64" The format of the string should be 
            "%assemblyName%;%className&amp;;..;%assemblyName%;%className&amp;;", 
            The CoreCoponent will look for "%assemblyName%;%className&amp;;" (with two ';' at
            end of assembly name and class name) and filter the fully matched item out
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.GeometryXmlProperties">
            <summary>
            This key is referenced in the geometry test framework.
            The value type for this key is bool.
            If the value is true, that means the core will generate XML properties.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IExecutionSession">
            <summary>
            Represents a session object for current execution.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IExecutionSession.Configuration">
            <summary>
            Returns the configuration object for this execution session.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExecutionSession.SearchFile(System.String)">
            <summary>
            Searches the given file and returns full path, if found.
            </summary>
            <param name="filename">File name to search.</param>
            <returns>Full path of given filename or empty string if file not 
            found.</returns>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.ExtensionStartupParams">
            <summary>
            An options structure used when calling IExtensionApplication.Startup
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ExtensionStartupParams.DisableADP">
            <summary>
            Disables ADP data collection.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IExtensionApplication">
            <summary>
            An FFI library can implement this interface to get some notifications
            from DesignScript application.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.StartUp(Autodesk.DesignScript.Interfaces.ExtensionStartupParams)">
            <summary>
            Called when first time this application is loaded.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.OnBeginExecution(Autodesk.DesignScript.Interfaces.IExecutionSession)">
            <summary>
            Called when script execution starts.
            </summary>
            <param name="session">Execution session object with which script
            execution starts.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.OnSuspendExecution(Autodesk.DesignScript.Interfaces.IExecutionSession)">
            <summary>
            Called when script execution is suspended for debugging/inspection
            </summary>
            <param name="session">Execution session object with which script
            execution starts.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.OnResumeExecution(Autodesk.DesignScript.Interfaces.IExecutionSession)">
            <summary>
            Called when script execution is resumed after debugging/inspection
            </summary>
            <param name="session">Execution session object with which script
            execution starts.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.OnEndExecution(Autodesk.DesignScript.Interfaces.IExecutionSession)">
            <summary>
            Called when script execution has ended.
            </summary>
            <param name="session">Execution session object with which script
            execution had started.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.ShutDown">
            <summary>
            Called when designscript application is shutting down.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.PreloadAsmLibraries(System.String)">
            <summary>
            Preloads unmanaged ASM libraries 
            </summary>
            <param name="baseDirectory"></param>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionProviderCore.VariableTypes">
            <summary>
            Already discovered variable types
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionProviderCore.ImportedTypes">
            <summary>
            Types that have already been imported into the scope
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionProviderCore.GetCompletionData(System.String,System.Boolean)">
            <summary>
            Generate completion data for the specified text, while import the given types into the
            scope and discovering variable assignments.
            </summary>
            <param name="code">The code to parse</param>
            <param name="expand">Determines if the entire namespace should be used</param>
            <returns>Return a list of IronPythonCompletionData </returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionProviderCore.GetDescription(System.String,System.String,System.Boolean)">
            <summary>
            Try to generate a description from a typename.
            </summary>
            <param name="stub">Everything before the last namespace or type name e.g. System.Collections in System.Collections.ArrayList</param>
            <param name="item">Everything after the stub</param>
            <param name="isInstance">Whether it's an instance or not</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionProviderCore.IsSupportedEngine(System.String)">
            <summary>
            Used to determine if this IExternalCodeCompletionProviderCore can provide completions for the given engine.
            </summary>
            <param name="engineName"></param>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionProviderCore.Initialize(System.String)">
            <summary>
            Used to load initialize libraries and types that should be available by default.
            </summary>
            <param name="dynamoCorePath"></param>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionData">
            <summary>
            This interface is essentially the same as ICompletionData from AvalonEdit 
            except it does not include any references to WPF.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionData.CompletionType">
            <summary>
            The CompletionType this completionData represents.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionData.Text">
            <summary>
             Gets the text. This property is used to filter the list of visible elements.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionData.Content">
            <summary>
               The displayed content. This can be the same as 'Text', or a WPF UIElement if
                you want to display rich content.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionData.Description">
            <summary>
              Gets the description.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IExternalCodeCompletionData.Priority">
            <summary>
             Gets the priority. This property is used in the selection logic. You can use
              it to prefer selecting those items which the user is accessing most frequently.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.ExternalCodeCompletionType">
            <summary>
            This Enum represents the current completion type that is found.
            Currently this is used to decorate the returned completion with an image.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.ILegacyPythonCompletionCore">
            <summary>
            This internal interface exists to support the legacy IronPythonCompletionProvider 
            without having a compile time reference from PythonNodeModel/WPF on DSIronPython.
            This interface should be removed when the legacy class is removed in 3.0.
            </summary>
        </member>
        <member name="E:DynamoServices.LoadLibraryEvents.LoadLibraryFailure">
            <summary>
            Raised when loading of a library fails. A failure message is passed as a parameter.
            </summary>
        </member>
        <member name="T:DynamoServices.RegisterForTraceAttribute">
            <summary>
            This attribute can be applied to methods that register callsite with
            trace mechanism.
            </summary>
        </member>
        <member name="T:DynamoServices.TraceUtils">
            <summary>
            Utility class to Get/Set TraceData
            </summary>
        </member>
        <member name="M:DynamoServices.TraceUtils.TEMP_GetTraceKeys">
            <summary>
            Returns a list of the keys bound to trace elements
            This should be extracted from the attribute on the methods
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoServices.TraceUtils.ClearTLSKey(System.String)">
            <summary>
            Clear a specific key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:DynamoServices.TraceUtils.ClearAllKnownTLSKeys">
            <summary>
            Clear the named slots for all the know keys
            </summary>
        </member>
        <member name="M:DynamoServices.TraceUtils.GetTraceData(System.String)">
            <summary>
            Returns the data that is bound to a particular key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoServices.TraceUtils.SetTraceData(System.String,System.Runtime.Serialization.ISerializable)">
            <summary>
            Set the data bound to a particular key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:DynamoServices.AssemblyBlockedException">
            <summary>
            Represents FileLoadException having HRESULT value of 0x80131515. 
            Throw this when we need to instruct the user to "unblock" the downloaded assembly.
            </summary>
        </member>
        <member name="T:PythonNodeModels.PythonEngineVersion">
            <summary>
            Enum of possible values of python engine versions.
            </summary>
        </member>
    </members>
</doc>
